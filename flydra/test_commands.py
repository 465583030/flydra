"""test flydra installed system commands"""
import pkg_resources
import os, subprocess
import numpy as np
import scipy.misc
from optparse import OptionParser
import nose
import tempfile

AUTOGEN_DIR = os.path.join(os.path.split(__file__)[0],'autogenerated')
GALLERY_PATH = os.path.join(os.path.split(__file__)[0],'..',
                            'flydra-sphinx-docs','gallery.rst')

DATAFILE2D = pkg_resources.resource_filename('flydra.a2','sample_datafile.h5')
DATAFILE3D = pkg_resources.resource_filename('flydra.a2','sample_datafile.h5')

CANNONICAL_FILENAMES = {'DATAFILE2D':'DATAFILE2D.h5',
                        'DATAFILE3D':'DATAFILE3D.h5',
                        'target':'image.png'}

image_test_cmd_result_pairs = [
    {'cmd':('flydra_analysis_plot_kalman_2d %(DATAFILE2D)s '
            '--save-fig=%(target)s'),
     'result':'plot_kalman_2d.png',
     'title':'Camera view of 2D data',
     },

    {'cmd':('flydra_analysis_plot_timeseries_2d_3d %(DATAFILE2D)s '
            '--save-fig=%(target)s'),
     'result':'plot_timeseries_2d.png',
     'title':'Timeseries of 2D data',
     },

    {'cmd':('flydra_analysis_plot_timeseries_2d_3d %(DATAFILE2D)s '
            '--kalman-file=%(DATAFILE3D)s --disable-kalman-smoothing '
            '--save-fig=%(target)s'),
     'result':'plot_timeseries_2d_3d.png',
     'title':'Timeseries of 2D data with overlaid 3D tracking data',
     },

    ]

gallery_rst_src = """
Gallery
*******

This page shows images that were automatically generated by the
command line tools installed with flydra. The command line used to
generate each figure is shown. These figures also serve as unit tests
for flydra -- the stored versions are compared with newly generated
versions whenever nosetests_ is run.

.. _nosetests: http://somethingaboutorange.com/mrl/projects/nose/

.. This file generated by flydra_test_commands --generate. EDITS WILL BE LOST.

%(image_gallery)s


"""

def test_image_generating_commands():
    for info in image_test_cmd_result_pairs:
        yield check_command_with_image, 'check', info['cmd'], info['result']

def generate_images():
    image_gallery = ""
    for info in image_test_cmd_result_pairs:
        check_command_with_image( 'generate', info['cmd'], info['result'])
        cmd_show = info['cmd']%CANNONICAL_FILENAMES
        if 'title' in info:
            title = info['title']
        else:
            title = info['cmd'].split()[0]
        image_gallery += title+'\n'
        image_gallery += '='*len(title)+'\n'
        image_gallery += '\n'
        image_gallery += 'The following command generated this image::\n\n'
        image_gallery += '  '+cmd_show+'\n'
        if 'rst_comments' in info:
            image_gallery += info['rst_comments'] + '\n'
        image_gallery += """
.. image:: ../flydra/autogenerated/%(result)s
  :width: %(width)d
"""%{'result':info['result'],'width':600}
        image_gallery += '\n'

    gallery_rst = gallery_rst_src%{'image_gallery':image_gallery}
    fd = open(GALLERY_PATH,mode='w')
    fd.write(gallery_rst)
    fd.close()

def check_command_with_image(mode,cmd_pre,result):
    result_fullpath = os.path.join( AUTOGEN_DIR, result )
    if mode=='check':
        handle, target = tempfile.mkstemp('.png')
    elif mode=='generate':
        target = result_fullpath
    else:
        raise ValueError('unknown mode')
    names = dict(target=target,
                 DATAFILE2D=DATAFILE2D,
                 DATAFILE3D=DATAFILE3D)
    cmd = cmd_pre%names
    subprocess.check_call(cmd, shell=True)
    if mode=='check':
        are_close = are_images_close( target, result_fullpath )
        os.unlink(target)
        assert are_close == True

def are_images_close( im1_filename, im2_filename):
    """return True if two image files are very similar"""
    im1 = scipy.misc.pilutil.imread(im1_filename)
    im2 = scipy.misc.pilutil.imread(im2_filename)
    if im1.ndim != im2.ndim:
        raise ValueError('images have different ndim')
    if im1.shape != im2.shape:
        raise ValueError('images have different shape')
    return np.allclose( im1, im2 )

def main():
    usage = '%prog FILE [options]'

    parser = OptionParser(usage)
    parser.add_option("--generate", action='store_true',
                      default=False)
    (options, args) = parser.parse_args()
    if options.generate:
        generate_images()
    else:
        nose.main()

if __name__=='__main__':
    main()
