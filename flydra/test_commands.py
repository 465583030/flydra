"""test flydra installed system commands"""
import pkg_resources
import os, subprocess
import numpy as np
import scipy.misc
from optparse import OptionParser
import nose
import tempfile

## FLYDRA_ROOT =
## DATA_DIR = os.path.abspath(os.path.join(FLYDRA_ROOT,'flydra/a2'))
## DATAFILE2D = os.path.join(DATA_DIR,'sample_datafile.h5')
AUTOGEN_DIR = os.path.join(os.path.split(__file__)[0],'autogenerated')
DATAFILE2D = pkg_resources.resource_filename('flydra.a2','sample_datafile.h5')

image_test_cmd_result_pairs = [

    ('flydra_analysis_plot_kalman_2d %(DATAFILE2D)s --save-fig=%(target)s',
     'plot_kalman_2d.png'),

    ]

def test_image_generating_commands():
    for cmd_pre,result in image_test_cmd_result_pairs:
        yield check_command_with_image, 'check', cmd_pre, result

def generate_images():
    for tup in generate_images_iter():
        cmd = tup[0]
        args = tup[1:]
        cmd(*args)

def generate_images_iter():
    for cmd_pre,result in image_test_cmd_result_pairs:
        yield check_command_with_image, 'generate', cmd_pre, result

def check_command_with_image(mode,cmd_pre,result):
    result_fullpath = os.path.join( AUTOGEN_DIR, result )
    if mode=='check':
        handle, target = tempfile.mkstemp('.png')
    elif mode=='generate':
        target = result_fullpath
    else:
        raise ValueError('unknown mode')
    names = dict(target=target,DATAFILE2D=DATAFILE2D)
    cmd = cmd_pre%names
    subprocess.check_call(cmd, shell=True)
    if mode=='check':
        are_close = are_images_close( target, result_fullpath )
        os.unlink(target)
        assert are_close == True

def are_images_close( im1_filename, im2_filename):
    """return True if two image files are very similar"""
    im1 = scipy.misc.pilutil.imread(im1_filename)
    im2 = scipy.misc.pilutil.imread(im2_filename)
    if im1.ndim != im2.ndim:
        raise ValueError('images have different ndim')
    if im1.shape != im2.shape:
        raise ValueError('images have different shape')
    return np.allclose( im1, im2 )

def main():
    usage = '%prog FILE [options]'

    parser = OptionParser(usage)
    parser.add_option("--generate", action='store_true',
                      default=False)
    (options, args) = parser.parse_args()
    if options.generate:
        generate_images()
    else:
        nose.main()

if __name__=='__main__':
    main()
