#!/usr/bin/env python
PACKAGE = "camnode"
import roslib;roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

index_enum = gen.enum([gen.const("cam00", int_t, 0, "Camera 0"),
 	                   gen.const("cam01", int_t, 1, "Camera 1"),
 	                   gen.const("cam02", int_t, 2, "Camera 2"),
 	                   gen.const("cam03", int_t, 3, "Camera 3"),
 	                   gen.const("cam04", int_t, 4, "Camera 4"),
 	                   gen.const("cam05", int_t, 5, "Camera 5"),
	                   gen.const("cam06", int_t, 6, "Camera 6"),
	                   gen.const("cam07", int_t, 7, "Camera 7"),
	                   gen.const("cam08", int_t, 8, "Camera 8") ],
	                   "Choose the camera (not by guid, unfortunately, just by index)")
gen.add("index", int_t, 0, "Camera number", 0, 0, 8, edit_method=index_enum)

gen.add("brightness", int_t, 0, "Brightness",                         0, 0,     255)
gen.add("gain", int_t, 0, "Percent multiplication on pixel values", 100, 0,     740)
gen.add("shutter", int_t, 0, "Exposure time in microseconds",       100, 0, 1000000)

gen.add("framerate_trigger", double_t, 0, "Trigger framerate",      20.0, 0.0,  200.0)
gen.add("framerate_max", double_t, 0, "Maximum framerate",          20.0, 0.0,  200.0)
gen.add("threshold_diff", double_t, 0, "Threshold for absdiff",      5.0, 0.0,  10.0)
gen.add("threshold_clear", double_t, 0, "Threshold for clear",       0.3, 0.0,  10.0)

gen.add("n_sigma", double_t, 0, "Criterion to determine if a pixel is significantly different than the mean",  7.0, 0.0,  20.0)
gen.add("n_erode", int_t, 0, "Number of erosions",                   0,   0,    20)

gen.add("roi/left", int_t, 0, "ROI left",        0,   0,   1920)
gen.add("roi/top", int_t, 0, "ROI top",          0,   0,   1080)
gen.add("roi/right", int_t, 0, "ROI right",   1023,   0,   1920)
gen.add("roi/bottom", int_t, 0, "ROI bottom",  767,   0,   1080)
gen.add("trigger_mode", int_t, 0, "Trigger mode",  0,   0,     10)

gen.add("dynamic_background", bool_t, 0, "Moving Average Background", True)
gen.add("use_cmp", bool_t, 0, "Use cmp", False)

gen.add("use_color_filter", bool_t, 0, "Convert pixels to red (requires color cameras)", False)
gen.add("color_filter_1", int_t, 0, "Color filter 1",              0,   0,   255)
gen.add("color_filter_2", int_t, 0, "Color filter 2",            150,   0,   255)
gen.add("color_filter_3", int_t, 0, "Color filter 3",            255,   0,   255)
gen.add("color_filter_sat", int_t, 0, "Color filter saturation", 100,   0,   255)


#gen.add("int_param", int_t, 0, "An Integer parameter", 50, 0, 100)
#gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
#gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)
#size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
#                  gen.const("Medium", int_t, 1, "A medium constant"),
#                  gen.const("Large", int_t, 2, "A large constant"),
#                  gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
#                  "An enum to set size")
#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "camnode", "Camnode"))
